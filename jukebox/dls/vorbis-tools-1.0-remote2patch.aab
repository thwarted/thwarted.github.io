diff -Nacr vorbis-tools-1.0.1.orig/ogg123/Makefile.am vorbis-tools-1.0.1/ogg123/Makefile.am
*** vorbis-tools-1.0.1.orig/ogg123/Makefile.am	Mon Sep 15 17:02:17 2003
--- vorbis-tools-1.0.1/ogg123/Makefile.am	Mon Mar 22 02:08:53 2004
***************
*** 24,34 ****
                  cfgfile_options.c cmdline_options.c \
                  file_transport.c format.c http_transport.c \
                  ogg123.c oggvorbis_format.c playlist.c \
!                 status.c transport.c  vorbis_comments.c \
                  audio.h buffer.h callbacks.h compat.h \
                  cfgfile_options.h cmdline_options.h \
                  format.h ogg123.h playlist.h status.h \
!                 transport.h vorbis_comments.h
  
  man_MANS = ogg123.1
  doc_DATA = ogg123rc-example
--- 24,34 ----
                  cfgfile_options.c cmdline_options.c \
                  file_transport.c format.c http_transport.c \
                  ogg123.c oggvorbis_format.c playlist.c \
!                 status.c transport.c remote.c vorbis_comments.c \
                  audio.h buffer.h callbacks.h compat.h \
                  cfgfile_options.h cmdline_options.h \
                  format.h ogg123.h playlist.h status.h \
!                 transport.h vorbis_comments.h remote.h
  
  man_MANS = ogg123.1
  doc_DATA = ogg123rc-example
diff -Nacr vorbis-tools-1.0.1.orig/ogg123/Makefile.in vorbis-tools-1.0.1/ogg123/Makefile.in
*** vorbis-tools-1.0.1.orig/ogg123/Makefile.in	Mon Nov 17 10:50:56 2003
--- vorbis-tools-1.0.1/ogg123/Makefile.in	Mon Mar 22 03:04:46 2004
***************
*** 156,166 ****
                  cfgfile_options.c cmdline_options.c \
                  file_transport.c format.c http_transport.c \
                  ogg123.c oggvorbis_format.c playlist.c \
!                 status.c transport.c  vorbis_comments.c \
                  audio.h buffer.h callbacks.h compat.h \
                  cfgfile_options.h cmdline_options.h \
                  format.h ogg123.h playlist.h status.h \
!                 transport.h vorbis_comments.h
  
  
  man_MANS = ogg123.1
--- 156,166 ----
                  cfgfile_options.c cmdline_options.c \
                  file_transport.c format.c http_transport.c \
                  ogg123.c oggvorbis_format.c playlist.c \
!                 status.c transport.c remote.c vorbis_comments.c \
                  audio.h buffer.h callbacks.h compat.h \
                  cfgfile_options.h cmdline_options.h \
                  format.h ogg123.h playlist.h status.h \
!                 transport.h remote.h vorbis_comments.h
  
  
  man_MANS = ogg123.1
***************
*** 180,186 ****
  	file_transport.$(OBJEXT) format.$(OBJEXT) \
  	http_transport.$(OBJEXT) ogg123.$(OBJEXT) \
  	oggvorbis_format.$(OBJEXT) playlist.$(OBJEXT) status.$(OBJEXT) \
! 	transport.$(OBJEXT) vorbis_comments.$(OBJEXT)
  ogg123_OBJECTS = $(am_ogg123_OBJECTS)
  ogg123_LDFLAGS =
  DEFAULT_INCLUDES =  -I. -I$(srcdir)
--- 180,186 ----
  	file_transport.$(OBJEXT) format.$(OBJEXT) \
  	http_transport.$(OBJEXT) ogg123.$(OBJEXT) \
  	oggvorbis_format.$(OBJEXT) playlist.$(OBJEXT) status.$(OBJEXT) \
! 	transport.$(OBJEXT) remote.$(OBJEXT) vorbis_comments.$(OBJEXT)
  ogg123_OBJECTS = $(am_ogg123_OBJECTS)
  ogg123_LDFLAGS =
  DEFAULT_INCLUDES =  -I. -I$(srcdir)
***************
*** 200,205 ****
--- 200,206 ----
  @AMDEP_TRUE@	./$(DEPDIR)/oggvorbis_format.Po \
  @AMDEP_TRUE@	./$(DEPDIR)/playlist.Po ./$(DEPDIR)/speex_format.Po \
  @AMDEP_TRUE@	./$(DEPDIR)/status.Po ./$(DEPDIR)/transport.Po \
+ @AMDEP_TRUE@	./$(DEPDIR)/remote.Po \
  @AMDEP_TRUE@	./$(DEPDIR)/vorbis_comments.Po
  COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
  	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
***************
*** 282,287 ****
--- 283,289 ----
  @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/speex_format.Po@am__quote@
  @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/status.Po@am__quote@
  @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/transport.Po@am__quote@
+ @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/remote.Po@am__quote@
  @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/vorbis_comments.Po@am__quote@
  
  distclean-depend:
diff -Nacr vorbis-tools-1.0.1.orig/ogg123/README.remote vorbis-tools-1.0.1/ogg123/README.remote
*** vorbis-tools-1.0.1.orig/ogg123/README.remote	Wed Dec 31 18:00:00 1969
--- vorbis-tools-1.0.1/ogg123/README.remote	Mon Mar 22 02:08:22 2004
***************
*** 0 ****
--- 1,117 ----
+ 
+ ---------------------------------------------
+ OGG123 generic remote interface for frontends
+ 2002 by Richard van Paasen <rvpaasen@dds.nl>
+ ---------------------------------------------
+ 
+ 
+ Introduction
+ ------------
+ The generic remote interface allows frontends to easily control ogg123 by
+ commands through stdin/stdout. To start the generic remote interface, start
+ ogg123 as following:
+ 
+   ogg123 -R -
+   
+ The interface is compatible with the remote interface of mpg123 (written
+ by Andreas Neuhaus and Michael Hipp). Frontends that already use mpg123
+ thus can add ogg123 support easily. As an example it's used by IRMP3, a
+ tool that allows you to control mpg123 and ogg123 with a standard infrared
+ remote control. See http://irmp3.sourceforge.net for more information.
+ 
+ 
+ Development status
+ ------------------
+ Most features have been implemented. Currently unsupported
+ response codes are: @I, @S and the a,b parameters of @F.
+ 
+ 
+ Command codes
+ -------------
+ Command codes may be abbreviated by its first character.
+ 
+ HELP
+ 			displays these help commands
+ 
+ QUIT
+ 			Stop playing and quit player
+ 
+ LOAD <a>
+ 			Load and play a file/URL
+ 
+ RELOAD
+ 			Reload the last song
+ 
+ STOP
+ 			Stop playing (without quitting the player)
+ 
+ PAUSE
+ 			Pause/unpause playing
+ 
+ JUMP [+|-]<a>
+ 			Skip <a> seconds:
+ 			+32.3	forward 32.3 seconds
+ 			-0.75	rewind 0.27 seconds
+ 			0	jump to the beginning
+ 			1024.9	jump to second 1024
+ 			A jump beyond the beginning restarts the song
+ 			A jump beyond the end ends the song
+ 
+ 
+ Response codes
+ --------------
+ Ogg123 returns errors on stderr, so your frontend should look not
+ only at stdout but also at stderr for responses.
+ 
+ @R ogg123 [from vorbis-tools 1.0]
+ 			Startup version message
+ 
+ @H text			Help message
+ 
+ @I ID3:<a><b><c>
+ 			Status message after loading a song
+ 			a = title (exactly 30 chars)
+ 			b = artist (exactly 30 chars)
+ 			c = album (exactly 30 chars)
+ 			d = year (exactly 4 chars)
+ 			e = comment (exactly 30 chars)
+ 			f = genre (string)
+ 
+ @I <a>
+ 			Status message after loading a song
+ 			a = filename without path and extension
+ 
+ @S <a> <b> <c> <d> <e> <f> <g> <h> <i> <j> <k> <l>
+ 			Status message after loading a song (stream info)
+ 			a = mpeg type (string)
+ 			b = layer (int)
+ 			c = sampling frequency (int)
+ 			d = mode (string)
+ 			e = mode extension (int)
+ 			f = framesize (int)
+ 			g = stereo (int)
+ 			h = copyright (int)
+ 			i = error protection (int)
+ 			j = emphasis (int)
+ 			k = bitrate (int)
+ 			l = extension (int)
+ 
+ @F <a> <b> <c> <d> <e>
+ 			Status message during playing (frame info)
+ 			a = framecount (int)
+ 			b = frames left this song (int)
+ 			c = seconds (float)
+ 			d = seconds left (float)
+ 			e = current bitrate
+ 
+ @P <a>
+ 			Playing status
+ 			a = 0      : playing stopped
+ 			a = 0 EOF  : end of song
+ 			a = 1      : playing paused
+ 			a = 2      : playing unpaused
+ 
+ @E <a>
+ 			An error occured. Errors may be also reported
+ 			by ogg123 through stderr (without @E)
+ 			a = error message (string)
diff -Nacr vorbis-tools-1.0.1.orig/ogg123/cmdline_options.c vorbis-tools-1.0.1/ogg123/cmdline_options.c
*** vorbis-tools-1.0.1.orig/ogg123/cmdline_options.c	Mon Sep  1 18:54:01 2003
--- vorbis-tools-1.0.1/ogg123/cmdline_options.c	Mon Mar 22 03:03:23 2004
***************
*** 42,47 ****
--- 42,48 ----
      {"device-option", required_argument, 0, 'o'},
      {"prebuffer", required_argument, 0, 'p'},
      {"quiet", no_argument, 0, 'q'},
+     {"remote", no_argument, 0, 'R'},
      {"verbose", no_argument, 0, 'v'},
      {"nth", required_argument, 0, 'x'},
      {"ntimes", required_argument, 0, 'y'},
***************
*** 75,81 ****
    audio_device_t *current;
    int ret;
  
!   while (-1 != (ret = getopt_long(argc, argv, "b:c::d:f:hl:k:K:o:p:qvVx:y:z@:",
  				  long_options, &option_index))) {
  
        switch (ret) {
--- 76,82 ----
    audio_device_t *current;
    int ret;
  
!   while (-1 != (ret = getopt_long(argc, argv, "b:c::d:f:hl:k:K:o:p:qRvVx:y:z@:",
  				  long_options, &option_index))) {
  
        switch (ret) {
***************
*** 187,192 ****
--- 188,198 ----
  	ogg123_opts->verbosity = 0;
  	break;
  	
+       case 'R':
+ 	ogg123_opts->remote = 1;
+ 	ogg123_opts->verbosity = 0;
+ 	break;
+ 
        case 'v':
  	ogg123_opts->verbosity++;
  	break;
***************
*** 311,316 ****
--- 317,323 ----
  	 "  -b n, --buffer n  Use an input buffer of 'n' kilobytes\n"
  	 "  -p n, --prebuffer n  Load n%% of the input buffer before playing\n"
  	 "  -v, --verbose  Display progress and other status information\n"
+ 	 "  -R, --remote  remotely controlled\n"
  	 "  -q, --quiet    Don't display anything (no title)\n"
  	 "  -x n, --nth    Play every 'n'th block\n"
  	 "  -y n, --ntimes Repeat every played block 'n' times\n"
diff -Nacr vorbis-tools-1.0.1.orig/ogg123/format.h vorbis-tools-1.0.1/ogg123/format.h
*** vorbis-tools-1.0.1.orig/ogg123/format.h	Tue Dec 18 20:52:53 2001
--- vorbis-tools-1.0.1/ogg123/format.h	Mon Mar 22 02:08:22 2004
***************
*** 53,58 ****
--- 53,59 ----
  } decoder_t;
  
  /* whence constants */
+ #define DECODER_SEEK_NONE  0
  #define DECODER_SEEK_START 1
  #define DECODER_SEEK_CUR   2
  
diff -Nacr vorbis-tools-1.0.1.orig/ogg123/ogg123.c vorbis-tools-1.0.1/ogg123/ogg123.c
*** vorbis-tools-1.0.1.orig/ogg123/ogg123.c	Tue Sep  2 14:37:05 2003
--- vorbis-tools-1.0.1/ogg123/ogg123.c	Mon Mar 22 03:03:46 2004
***************
*** 42,47 ****
--- 42,48 ----
  #include "status.h"
  #include "playlist.h"
  #include "compat.h"
+ #include "remote.h"
  
  #include "ogg123.h"
  #include "i18n.h"
***************
*** 149,158 ****
  
    opts->status_freq = 10.0;
    opts->playlist = NULL;
  
  }
  
- 
  /* This function selects which statistics to display for our
     particular configuration.  This does not have anything to do with
     verbosity, but rather with which stats make sense to display. */
--- 150,159 ----
  
    opts->status_freq = 10.0;
    opts->playlist = NULL;
+   opts->remote = 0;
  
  }
  
  /* This function selects which statistics to display for our
     particular configuration.  This does not have anything to do with
     verbosity, but rather with which stats make sense to display. */
***************
*** 202,239 ****
  					source->transport->statistics(source),
  					decoder->format->statistics(decoder));
  
!   /* Disable/Enable statistics as needed */
  
!   if (pstats_arg->decoder_statistics->total_time <
!       pstats_arg->decoder_statistics->current_time) {
!     stat_format[2].enabled = 0;  /* Remaining playback time */
!     stat_format[3].enabled = 0;  /* Total playback time */
!   }
  
!   if (pstats_arg->data_source_statistics->input_buffer_used) {
!     stat_format[6].enabled = 1;  /* Input buffer fill % */
!     stat_format[7].enabled = 1;  /* Input buffer state  */
!   }
  
!   if (audio_buffer) {
!     /* Place a status update into the buffer */
!     buffer_append_action_at_end(audio_buffer,
! 				&print_statistics_action,
! 				pstats_arg);
!     
!     /* And if we are not playing right now, do an immediate
!        update just the output buffer */
!     buffer_stats = buffer_statistics(audio_buffer);
!     if (buffer_stats->paused || buffer_stats->prebuffering) {
!       pstats_arg = new_print_statistics_arg(stat_format,
! 					    NULL,
! 					    NULL);
!       print_statistics_action(audio_buffer, pstats_arg);
!     }
!     free(buffer_stats);
!     
!   } else
!     print_statistics_action(NULL, pstats_arg);
  }
  
  
--- 203,250 ----
  					source->transport->statistics(source),
  					decoder->format->statistics(decoder));
  
!   if (options.remote) {
!   
!     /* Display statistics via the remote interface */
!     remote_time(pstats_arg->decoder_statistics->current_time, 
!                 pstats_arg->decoder_statistics->total_time,
! 				pstats_arg->decoder_statistics->instant_bitrate);
! 				
!   } else {
!   
! 	/* Disable/Enable statistics as needed */
  
! 	if (pstats_arg->decoder_statistics->total_time <
!     	pstats_arg->decoder_statistics->current_time) {
!       stat_format[2].enabled = 0;  /* Remaining playback time */
!       stat_format[3].enabled = 0;  /* Total playback time */
! 	}
  
! 	if (pstats_arg->data_source_statistics->input_buffer_used) {
!       stat_format[6].enabled = 1;  /* Input buffer fill % */
!       stat_format[7].enabled = 1;  /* Input buffer state  */
! 	}
  
! 	if (audio_buffer) {
!       /* Place a status update into the buffer */
!       buffer_append_action_at_end(audio_buffer,
! 				  &print_statistics_action,
! 				  pstats_arg);
! 
!       /* And if we are not playing right now, do an immediate
!     	 update just the output buffer */
!       buffer_stats = buffer_statistics(audio_buffer);
!       if (buffer_stats->paused || buffer_stats->prebuffering) {
!     	pstats_arg = new_print_statistics_arg(stat_format,
! 					      NULL,
! 					      NULL);
!     	print_statistics_action(audio_buffer, pstats_arg);
!       }
!       free(buffer_stats);
! 
! 	} else
!       print_statistics_action(NULL, pstats_arg);
!   }
  }
  
  
***************
*** 383,393 ****
    signal (SIGCONT, signal_handler);
  
  
!   /* Play the files/streams */
!   i = 0;
!   while (i < items && !sig_request.exit) {
!     play(playlist_array[i]);
!     i++;
    }
  
    playlist_array_destroy(playlist_array, items);
--- 394,412 ----
    signal (SIGCONT, signal_handler);
  
  
!   if (options.remote) {
!   
!     /* run the mainloop for the remote interface */
!     remote_mainloop();
! 
!   } else {
! 
! 	/* Play the files/streams */
! 	i = 0;
! 	while (i < items && !sig_request.exit) {
!       play(playlist_array[i]);
!       i++;
! 	}
    }
  
    playlist_array_destroy(playlist_array, items);
***************
*** 507,513 ****
  	break;
        }
  
!       if (sig_request.pause) {
  	if (audio_buffer)
  	  buffer_thread_pause (audio_buffer);
  
--- 526,544 ----
  	break;
        }
  
! 	if (options.remote) {
! 	
! 		/* run the playloop for the remote interface */
! 		if (remote_playloop()) {
! 			/* end song requested */
! 			eof = eos = 1;
! 			break;
! 		}
! 
! 		/* Skip over audio */
! 	}
! 
! 	if (sig_request.pause) {
  	if (audio_buffer)
  	  buffer_thread_pause (audio_buffer);
  
diff -Nacr vorbis-tools-1.0.1.orig/ogg123/ogg123.h vorbis-tools-1.0.1/ogg123/ogg123.h
*** vorbis-tools-1.0.1.orig/ogg123/ogg123.h	Mon Sep  1 18:54:02 2003
--- vorbis-tools-1.0.1/ogg123/ogg123.h	Mon Mar 22 02:55:32 2004
***************
*** 43,48 ****
--- 43,50 ----
  
    double status_freq;         /* Number of status updates per second */
  
+   int remote;                 /* Remotely controlled */
+ 
    playlist_t *playlist;       /* List of files to play */
  } ogg123_options_t;
  
diff -Nacr vorbis-tools-1.0.1.orig/ogg123/remote.c vorbis-tools-1.0.1/ogg123/remote.c
*** vorbis-tools-1.0.1.orig/ogg123/remote.c	Wed Dec 31 18:00:00 1969
--- vorbis-tools-1.0.1/ogg123/remote.c	Mon Mar 22 03:12:38 2004
***************
*** 0 ****
--- 1,409 ----
+ /* remote.c by Richard van Paasen <rvpaasen@dds.nl> */
+ 
+ /********************************************************************
+  *                                                                  *
+  * THIS FILE IS PART OF THE OggVorbis SOFTWARE CODEC SOURCE CODE.   *
+  * USE, DISTRIBUTION AND REPRODUCTION OF THIS SOURCE IS GOVERNED BY *
+  * THE GNU PUBLIC LICENSE 2, WHICH IS INCLUDED WITH THIS SOURCE.    *
+  * PLEASE READ THESE TERMS BEFORE DISTRIBUTING.                     *
+  *                                                                  *
+  * THE Ogg123 SOURCE CODE IS (C) COPYRIGHT 2000-2001                *
+  * by Kenneth C. Arnold <ogg@arnoldnet.net> AND OTHER CONTRIBUTORS  *
+  * http://www.xiph.org/                                             *
+  *                                                                  *
+  ********************************************************************
+ 
+  last mod: $Id: remote.c,v 1.4 2002/11/22 22:52:01 rvpaasen Exp $
+ 
+  ********************************************************************/
+ 
+ #include <stdio.h>
+ #include <string.h>
+ #include <stdlib.h>
+ #include <stdarg.h>
+ #include <pthread.h>
+ #include <semaphore.h>
+ 
+ #include "ogg123.h"
+ #include "format.h"
+ 
+ /* Maximum size of the input buffer */
+ #define MAXBUF 1024
+ /* Undefine logfile if you don't want it */
+ //#define LOGFILE "/tmp/ogg123.log"
+ 
+ /* The play function in ogg123.c */
+ extern void play (char *source_string);
+ extern ogg123_options_t options;
+ 
+ /* Status */
+ typedef enum { PLAY, STOP, PAUSE, NEXT, QUIT} Status;
+ static Status status = STOP;
+ 
+ /* Threading is introduced to reduce the
+    amount of processor time that ogg123
+    will take if it is in idle state */
+ 
+ /* Thread control locks */
+ static pthread_mutex_t main_lock;
+ static sem_t sem_command;
+ static sem_t sem_processed;
+ static pthread_mutex_t output_lock;
+ 
+ #ifdef LOGFILE
+ void send_log(const char* fmt, ...) {
+ 
+   FILE* fp;
+   va_list ap;
+   pthread_mutex_lock (&output_lock);
+   fp=fopen(LOGFILE,"a");
+   va_start(ap, fmt);
+   vfprintf(fp, fmt, ap);
+   va_end(ap);
+   fprintf(fp, "\n");
+   fclose(fp);
+   pthread_mutex_unlock (&output_lock);
+   return;
+ }
+ #else
+   #define send_log(...)
+ #endif
+ 
+ static void send_msg(const char* fmt, ...) {
+ 
+   va_list ap;
+   pthread_mutex_lock (&output_lock);
+   fprintf(stdout, "@");
+   va_start(ap, fmt);
+   vfprintf(stdout, fmt, ap);
+   va_end(ap);
+   fprintf(stdout, "\n");
+   pthread_mutex_unlock (&output_lock);
+   return;
+ }
+ 
+ static void send_err(const char* fmt, ...) {
+   va_list ap;
+   pthread_mutex_lock (&output_lock);
+   fprintf(stderr, "@");
+   va_start(ap, fmt);
+   vfprintf(stderr, fmt, ap);
+   va_end(ap);
+   fprintf(stderr, "\n");
+   pthread_mutex_unlock (&output_lock);
+   return;
+ }
+ 
+ static Status getstatus() {
+ 
+   return status;
+ }
+ 
+ static void setstatus(Status s) {
+ 
+   status = s;
+ }
+ 
+ static void invertpause() {
+ 
+   if (status==PLAY) {
+     status = PAUSE;
+   }
+   else if (status==PAUSE) {
+     status = PLAY;
+   }
+   return;
+ }
+ 
+ static void * remotethread(void * arg) {
+ 
+   int done = 0;
+   int error = 0;
+   int ignore = 0;
+   char buf[MAXBUF+1];
+   char *b;
+   
+   buf[MAXBUF]=0;
+   
+   while(!done) {
+     
+     /* Read a line */
+     buf[0] = 0;
+     send_log("Waiting for input: ...");
+     if (!fgets(buf, MAXBUF, stdin)) {
+       setstatus(QUIT);
+       done = 1;
+     }
+     buf[strlen(buf)-1] = 0;
+ 
+     /* Lock on */
+     pthread_mutex_lock (&main_lock);
+ 
+     send_log("Input: %s", buf);
+     error = 0;
+ 
+     if (done) {
+       ignore = 0;
+       error = 0;
+     } else
+     if (!strncasecmp(buf,"l",1)) {
+ 	/* prepare to load */
+       if ((b=strchr(buf,' ')) != NULL) {
+         /* Prepare to load a new song */
+         strcpy((char*)arg, b+1);
+         setstatus(NEXT);
+       } 
+       else {
+         /* Invalid load command */
+         error = 1;
+       }
+     }
+     else
+     if (!strncasecmp(buf,"p",1)) {
+       /* Prepare to (un)pause */
+       invertpause();
+     }
+ 	else
+     if (!strncasecmp(buf,"j",1)) {
+       /* Prepare to seek */
+       /* if ((b=strchr(buf,' ')) != NULL) {
+         set_seek_opt(&options, b+1);
+ 	  }
+ 	commented out AAB 2004-03-22 because this patch doesn't support seeking from remote
+ 	*/
+       ignore = 1;
+     }
+     else
+     if (!strncasecmp(buf,"s",1)) {
+       /* Prepare to stop */
+       setstatus(STOP);
+     }
+ 	else
+     if (!strncasecmp(buf,"r",1)) {
+       /* Prepare to reload */
+       setstatus(NEXT);
+     }
+     else
+     if (!strncasecmp(buf,"h",1)) {
+       /* Send help */
+ 	  send_msg("H +----------------------------------------------------+");
+ 	  send_msg("H | Ogg123 remote interface                            |");
+ 	  send_msg("H |----------------------------------------------------|");
+ 	  send_msg("H | Load <file>     -  load a file and starts playing  |");
+ 	  send_msg("H | Pause           -  pause or unpause playing        |");
+ 	  /* send_msg("H | Jump [+|-]<f>   -  jump <f> seconds forth or back  |"); */
+ 	  send_msg("H | Stop            -  stop playing                    |");
+ 	  send_msg("H | Reload          -  reload last song                |");
+ 	  send_msg("H | Quit            -  quit ogg123                     |");
+ 	  send_msg("H |----------------------------------------------------|");
+ 	  send_msg("H | refer to README.remote for documentation           |");
+ 	  send_msg("H +----------------------------------------------------+");
+ 	  ignore = 1;
+     }
+     else
+     if (!strncasecmp(buf,"q",1)) {
+       /* Prepare to quit */
+       setstatus(QUIT);
+       done = 1;
+     }
+     else {
+       /* Unknown input received */
+       error = 1;
+     }
+ 
+     if (ignore) {
+       /* Unlock */
+       pthread_mutex_unlock (&main_lock);
+ 	  ignore = 0;
+ 	}
+ 	else {
+ 	  if (error) {
+     	/* Send the error and unlock */
+     	send_err("E Unknown command '%s'", buf);
+     	send_log("Unknown command '%s'", buf);
+ 		/* Unlock */
+     	pthread_mutex_unlock (&main_lock);
+       } 
+       else {
+     	/* Signal the main thread */
+     	sem_post(&sem_command);
+     	/* Unlock */
+     	pthread_mutex_unlock (&main_lock);
+     	/* Wait until the change has been noticed */
+     	sem_wait(&sem_processed);
+       }
+ 	}
+   }
+ 
+   return NULL;
+ }
+ 
+ void remote_mainloop(void) {
+ 
+   int r;
+   pthread_t th;
+   Status s;
+   char fname[MAXBUF+1];
+ 
+   /* Need to output line by line! */
+   setlinebuf(stdout);
+ 
+   /* Send a greeting */
+   send_msg("R ogg123 from " PACKAGE " " VERSION);
+ 
+   /* Initialize the thread controlling variables */
+   pthread_mutex_init(&main_lock, NULL);
+   sem_init(&sem_command, 0, 0);
+   sem_init(&sem_processed, 0, 0);
+ 
+   /* Start the thread */
+   r = pthread_create(&th, NULL, remotethread, (void*)fname);
+   if (r != 0) {
+     send_err("E Could not create a thread (code %d)", r);
+     return;
+   }
+ 
+   send_log("Start");
+ 
+   /* The thread may already have processed some input,
+      get the current status
+    */
+   pthread_mutex_lock(&main_lock);
+   s = getstatus();
+   pthread_mutex_unlock(&main_lock);
+ 
+   while (s != QUIT) {
+ 
+     /* wait for a new command */
+     if (s != NEXT) {
+ 
+       /* Wait until a new status is available,
+          This puts the main tread asleep and
+          saves resources
+        */
+        
+       sem_wait(&sem_command);
+ 
+       pthread_mutex_lock(&main_lock);
+       s = getstatus();
+       pthread_mutex_unlock(&main_lock);
+     }
+ 
+     send_log("Status: %d", s);
+ 
+     if (s == NEXT) {
+ 
+       /* The status is to play a new song. Set
+          the status to PLAY and signal the thread
+          that the status has been processed.
+        */
+        
+       send_msg("I %s", fname);
+       send_msg("S 0.0 0 00000 xxxxxx 0 0 0 0 0 0 0 0");
+       pthread_mutex_lock(&main_lock);
+       setstatus(PLAY);
+       s = getstatus();
+       send_log("mainloop s=%d", s);
+       sem_post(&sem_processed);
+       s = getstatus();
+       send_log("mainloop s=%d", s);
+       pthread_mutex_unlock(&main_lock);
+ 
+       /* Start the player. The player calls the playloop
+          frequently to check for a new status (e.g. NEXT,
+          STOP or PAUSE.
+        */
+ 
+       pthread_mutex_lock(&main_lock);
+       s = getstatus();
+       pthread_mutex_unlock(&main_lock);
+       send_log("mainloop s=%d", s);
+       play(fname);
+       
+       /* Retrieve the new status */
+       pthread_mutex_lock(&main_lock);
+       s = getstatus();
+       pthread_mutex_unlock(&main_lock);
+ 
+       if (s == NEXT) {
+ 	  
+ 	    /* Send "play stopped" */
+         send_msg("P 0");
+         send_log("P 0");
+       } else {
+ 	  
+ 	    /* Send "play stopped at eof" */
+         send_msg("P 0 EOF");
+         send_log("P 0 EOF");
+       }
+       
+     }
+     else {
+ 
+       /* Irrelevent status, notice the thread that
+          it has been processed.
+        */
+        
+       sem_post(&sem_processed);
+     }    
+   }
+ 
+   /* Send "Quit" */
+   send_msg("Q");
+   send_log("Quit");
+ 
+   /* Cleanup the semaphores */
+   sem_destroy(&sem_command);
+   sem_destroy(&sem_processed);
+ 
+   return;
+ }
+ 
+ int remote_playloop(void) {
+ 
+   Status s;
+ 
+   /* Check the status. If the player should pause,
+      then signal that the command has been processed
+      and wait for a new status. A new status will end
+      the player and return control to the main loop.
+      The main loop will signal that the new command
+      has been processed.
+    */
+   
+   pthread_mutex_lock (&main_lock);
+   s = getstatus();
+   pthread_mutex_unlock (&main_lock);
+ 
+   send_log("playloop entry s=%d", s);
+ 
+   if (s == PAUSE) {
+ 
+     /* Send "pause on" */
+     send_msg("P 1");
+ 
+     while (s == PAUSE) {
+ 
+       sem_post(&sem_processed);
+       sem_wait(&sem_command);
+       pthread_mutex_lock (&main_lock);
+       s = getstatus();
+       pthread_mutex_unlock (&main_lock);
+     }
+ 
+     /* Send "pause off" */
+     send_msg("P 2");
+   }
+ 
+   send_log("playloop exit s=%d", s);
+ 
+   return ((s == NEXT) || (s == STOP) || (s == QUIT));
+ }
+ 
+ void remote_time(double current, double total, long bitrate) {
+ 
+   /* Send the frame (not implemented yet) the time and current bitrate */
+   send_msg("F 0 0 %.2f %.2f %li", current, (total-current), (bitrate/1024));
+   
+   return;
+ }
diff -Nacr vorbis-tools-1.0.1.orig/ogg123/remote.h vorbis-tools-1.0.1/ogg123/remote.h
*** vorbis-tools-1.0.1.orig/ogg123/remote.h	Wed Dec 31 18:00:00 1969
--- vorbis-tools-1.0.1/ogg123/remote.h	Mon Mar 22 02:08:22 2004
***************
*** 0 ****
--- 1,21 ----
+ /* remote.h by Richard van Paasen <rvpaasen@dds.nl> */
+ 
+ /********************************************************************
+  *                                                                  *
+  * THIS FILE IS PART OF THE OggVorbis SOFTWARE CODEC SOURCE CODE.   *
+  * USE, DISTRIBUTION AND REPRODUCTION OF THIS SOURCE IS GOVERNED BY *
+  * THE GNU PUBLIC LICENSE 2, WHICH IS INCLUDED WITH THIS SOURCE.    *
+  * PLEASE READ THESE TERMS BEFORE DISTRIBUTING.                     *
+  *                                                                  *
+  * THE Ogg123 SOURCE CODE IS (C) COPYRIGHT 2000-2001                *
+  * by Kenneth C. Arnold <ogg@arnoldnet.net> AND OTHER CONTRIBUTORS  *
+  * http://www.xiph.org/                                             *
+  *                                                                  *
+  ********************************************************************
+ 
+  last mod: $Id: remote.h,v 1.1 2002/11/20 00:03:34 rvpaasen Exp $
+ 
+  ********************************************************************/
+ 
+ void remote_mainloop(void);
+ int remote_playloop(void);
